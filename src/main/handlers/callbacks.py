import os

import django
from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from main.constants import BOT_HOST
from main.handlers.queue import queue_handler
from main.handlers.utils.interactions import (
    describe_reset_trigger,
    imagine_trigger,
    send_pan_trigger,
    send_reset_trigger,
    send_upsample_trigger,
    send_variation_trigger,
    send_vary_trigger,
    send_zoom_trigger,
)
from main.handlers.utils.wallet import get_pay_link
from main.keyboards.pay import get_gen_count, get_inline_keyboard_from_buttons

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "t_bot.settings")
django.setup()

from main.models import Prompt, Referral, User  # noqa: E402

callback_router = Router()


@callback_router.callback_query(lambda c: c.data.startswith("V"))
async def callbacks_variations(callback: types.CallbackQuery):
    action = callback.data
    message_hash = callback.message.document.file_name.split(".")[0]

    queue: Prompt = await Prompt.objects.get_prompt_by_message_hash(message_hash=message_hash)
    telegram_user: User = await User.objects.get_user_by_chat_id(chat_id=queue.telegram_chat_id)

    if action == "V1":
        await queue_handler.add_task(
            send_variation_trigger, variation_index="1", queue=queue, user_role=telegram_user.role
        )
    elif action == "V2":
        await queue_handler.add_task(
            send_variation_trigger, variation_index="2", queue=queue, user_role=telegram_user.role
        )
    elif action == "V3":
        await queue_handler(send_variation_trigger, variation_index="3", queue=queue, user_role=telegram_user.role)
    elif action == "V4":
        await queue_handler.add_task(
            send_variation_trigger, variation_index="4", queue=queue, user_role=telegram_user.role
        )

    await callback.answer()


@callback_router.callback_query(lambda c: c.data.startswith("_v5"))
async def callbacks_upsamples_v5(callback: types.CallbackQuery):
    action = callback.data
    message_hash = callback.message.document.file_name.split(".")[0]

    queue: Prompt = await Prompt.objects.get_prompt_by_message_hash(message_hash=message_hash)
    telegram_user = await User.objects.get_user_by_chat_id(chat_id=queue.telegram_chat_id)

    await queue_handler.add_task(
        send_upsample_trigger, upsample_index="1", queue=queue, version=action, user_role=telegram_user.role
    )


@callback_router.callback_query(lambda c: c.data.startswith("U"))
async def callbacks_upsamples(callback: types.CallbackQuery):
    action = callback.data
    message_hash = callback.message.document.file_name.split(".")[0]

    queue: Prompt = await Prompt.objects.get_prompt_by_message_hash(message_hash=message_hash)
    telegram_user = await User.objects.get_user_by_chat_id(chat_id=queue.telegram_chat_id)

    help_message = (
        "ü™ÑVary Strong - –≤–Ω–æ—Å–∏—Ç –±–æ–ª—å—à–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–≤–æ–µ–Ω—å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ "
        "–≤–æ–æ–±—Ä–∞–∂–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
        "ü™ÑVary stable - –≤–Ω–æ—Å–∏—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–∑–¥–æ–≤–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏, –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º \n\n"
        "üîçZoom out - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É,  –¥–æ—Ä–∏—Å–æ–≤—ã–≤–∞—è –æ–±—ä–µ–∫—Ç –∏ —Ñ–æ–Ω\n\n"
        "üîºUpscale -  —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏,"
        " –≤ 2 (2048—Ö2048) –∏ 4 —Ä–∞–∞–∑–∞ (4096—Ö4096), —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - 1024x1024."
    )

    await callback.message.answer(help_message)

    if action == "U1":
        await queue_handler.add_task(
            send_upsample_trigger, upsample_index="1", queue=queue, user_role=telegram_user.role
        )
    elif action == "U2":
        await queue_handler.add_task(
            send_upsample_trigger, upsample_index="2", queue=queue, user_role=telegram_user.role
        )
    elif action == "U3":
        await queue_handler.add_task(
            send_upsample_trigger, upsample_index="3", queue=queue, user_role=telegram_user.role
        )
    elif action == "U4":
        await queue_handler.add_task(
            send_upsample_trigger, upsample_index="4", queue=queue, user_role=telegram_user.role
        )

    await callback.answer()


@callback_router.callback_query(lambda c: c.data.startswith("reset"))
async def callback_reset(callback: types.CallbackQuery):
    message_hash = callback.message.document.file_name.split(".")[0]

    queue: Prompt = await Prompt.objects.get_prompt_by_message_hash(message_hash=message_hash)
    telegram_user = await User.objects.get_user_by_chat_id(chat_id=queue.telegram_chat_id)

    await queue_handler.add_task(
        send_reset_trigger,
        message_id=queue.discord_message_id,
        message_hash=queue.message_hash,
        user_role=telegram_user.role,
    )

    await callback.answer()


@callback_router.callback_query(lambda c: c.data.startswith("vary"))
async def callback_vary(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    message_hash = callback.message.document.file_name.split(".")[0]

    queue: Prompt = await Prompt.objects.get_prompt_by_message_hash(message_hash=message_hash)
    telegram_user = await User.objects.get_user_by_chat_id(chat_id=queue.telegram_chat_id)

    if action == "strong":
        await queue_handler.add_task(
            send_vary_trigger, vary_type="high_variation", queue=queue, user_role=telegram_user.role
        )
    elif action == "subtle":
        await queue_handler.add_task(
            send_vary_trigger, vary_type="low_variation", queue=queue, user_role=telegram_user.role
        )

    await callback.answer()


@callback_router.callback_query(lambda c: c.data.startswith("zoom"))
async def callback_zoom(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    message_hash = callback.message.document.file_name.split(".")[0]

    queue: Prompt = await Prompt.objects.get_prompt_by_message_hash(message_hash=message_hash)
    telegram_user = await User.objects.get_user_by_chat_id(chat_id=queue.telegram_chat_id)

    if action == "2":
        await queue_handler.add_task(send_zoom_trigger, queue=queue, zoomout=1, user_role=telegram_user.role)
    elif action == "1.5":
        await queue_handler.add_task(send_zoom_trigger, queue=queue, zoomout=action, user_role=telegram_user.role)

    await callback.answer()


@callback_router.callback_query(lambda c: c.data.startswith("pan"))
async def callback_pan(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    message_hash = callback.message.document.file_name.split(".")[0]

    queue: Prompt = await Prompt.objects.get_prompt_by_message_hash(message_hash=message_hash)
    telegram_user = await User.objects.get_user_by_chat_id(chat_id=queue.telegram_chat_id)

    await queue_handler.add_task(send_pan_trigger, queue=queue, direction=action, user_role=telegram_user.role)

    await callback.answer()


@callback_router.callback_query(lambda c: c.data.startswith("mjpay"))
async def callback_mj_pay(callback: types.CallbackQuery):
    amount = f"{callback.data.split('_')[1]}.00"
    desc = "Get descriptions from mid journey on your telegram account"

    pay_link = await get_pay_link(amount=amount, description=desc, customer_id=str(callback.from_user.id))

    if not pay_link:
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(")
        await callback.answer()
        return

    pay_button = types.InlineKeyboardButton(text="üëõ Pay via Wallet", url=pay_link)
    key_board = get_inline_keyboard_from_buttons((pay_button,))

    gen_count = get_gen_count(amount=amount)

    await callback.message.answer(
        f"Get {gen_count} prompts for {amount}$\n<b>Enjoy!</b>",
        reply_markup=key_board,
    )
    await callback.answer()


@callback_router.callback_query(lambda c: c.data.startswith("describe"))
async def callbacks_describe(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    telegram_user: User = await User.objects.get_user_by_chat_id(chat_id=callback.message.chat.id)

    if callback.data != "reset" and action != "all":
        prompt = callback.message.caption.split("\n\n")[int(action)]
        logger.debug(callback.message.caption)
        logger.debug(prompt)

        await queue_handler.add_task(
            imagine_trigger, message=callback.message, prompt=prompt, user_role=telegram_user.role
        )
    elif callback.data == "reset":
        await describe_reset_trigger(message_id=telegram_user.chat_id)


# Common


@callback_router.callback_query(lambda c: c.data.startswith("start"))
async def menu_start_callback(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    current_user: User = await User.objects.get_user_by_chat_id(str(callback.message.chat.id))

    if action == "mj":
        intro_message = (
            "‚óè –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã, —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö –ª–æ–≥–∏—á–µ—Å–∫–æ–π –∑–∞–ø—è—Ç–æ–π;\n"
            "(–ë—Ä–µ–¥ –ü–∏—Ç –≤ —Ä–æ–ª–∏ –¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä —Å–∏–¥–∏—Ç –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–µ, –æ–≥–æ–Ω—å –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ (–º–æ–Ω–æ—à–∏—Ä–Ω—ã–π)\n"
            "‚ùóÔ∏è–ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω! –ß–µ–º —Ä–∞–Ω—å—à–µ —Å–ª–æ–≤–æ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –µ–≥–æ –≤–µ—Å;\n"
            "‚óè –ù–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–∏—Å–∞—Ç—å '—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', —ç—Ç–æ —É—Ö—É–¥—à–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç;\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –∏–ª–∏ –æ–±—ä–µ–¥–µ–Ω–µ–Ω–∏—è –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –±–æ—Ç—É –∏ "
            "–Ω–∞–ø–∏—à–∏ –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–µ–π\n"
            "‚óè –í–Ω–∏–º–∞–Ω–∏–µ!!! –°—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 18+, "
            "—Ä–∞–±–æ—Ç–∞–µ—Ç AI –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≤–µ–¥–µ—Ç –µ –±–∞–Ω—É."
        )

        await callback.message.answer(intro_message)
        await callback.answer()
        return
    if action == "dale":
        pass
        await callback.answer()
        return
    if action == "gpt":
        pass
        await callback.answer()
        return
    if action == "lk":
        referral: Referral = await Referral.objects.get_referral_by_user(user=current_user)
        if not referral:
            referral = await Referral.objects.create_referral(current_user)

        builder = InlineKeyboardBuilder()
        answer = f"‚óè –í–∞—à –±–∞–ª–∞–Ω—Å {current_user.balance}\n" f"‚óè –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {BOT_HOST}{referral.key}"
        lk_buttons = (types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¢–∞—Ä–∏—Ñ—ã", callback_data="lk_options"),)
        builder.row(*lk_buttons)
        await callback.message.answer(answer, reply_markup=builder.as_markup())

        await callback.answer()
        return
    if action == "ref":
        referral: Referral = await Referral.objects.get_referral_by_user(user=current_user)
        if not referral:
            referral = await Referral.objects.create_referral(current_user)

        answer = (
            "‚óè –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –í–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ 6 —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            f"‚óè –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {BOT_HOST}{referral.key}"
        )
        await callback.message.answer(answer)

        await callback.answer()
        return


@callback_router.callback_query(lambda c: c.data.startswith("lk"))
async def lk_callback(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    current_user: User = await User.objects.get_user_by_chat_id(str(callback.message.chat.id))

    if action == "options":
        answer = (
            f"‚óè –í–∞—à –±–∞–ª–∞–Ω—Å –≤ —Ç–æ–∫–µ–Ω–∞—Ö: {current_user.balance}\n"
            "‚óè –û–¥–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Midjourney = 2\n"
            "–û—Ç–¥–µ–ª—å–Ω–æ —Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Upscale:\n"
            "   –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑—É–º, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞—å–∞ –∏ —Ç–¥ = 2\n"
            "   Upscale 2x = 4\n"
            "   Upscale 4x = 8\n"
            "‚óè –û–¥–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Dal-E = 2\n"
            "‚óè –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å Chat GPT –≤ —Ç.—á. –ü–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–∞ = 1\n"
            "‚óè –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤ USDT - 1 usdt = 100—Ä"
        )
        # TODO
        await callback.message.answer(answer)


@callback_router.callback_query(lambda c: c.data.startswith("suggestion"))
async def suggestion_callback(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    prompt = callback.data.split("_")[-1]
    prompt = prompt.replace(".", " ")

    if action == "gpt":
        pass
        await callback.answer()
        return
    if action == "stay":
        await imagine_trigger(callback.message, prompt)
        await callback.answer()
        return
