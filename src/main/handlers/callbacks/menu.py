import os

import django
from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from main.constants import BOT_START_HOST
from main.enums import ProductEnum
from main.models import Referral, User
from main.models.prices import Price
from main.utils import MenuState

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "t_bot.settings")
django.setup()

menu_router = Router()


@menu_router.callback_query(lambda c: c.data.startswith("start"))
async def menu_start_callback(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    current_user: User = await User.objects.get_user_by_chat_id(str(callback.message.chat.id))

    if action == "mj":
        intro_message = (
            "üåÜ–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º(–Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å), —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö –ª–æ–≥–∏—á–µ—Å–∫–æ–π –∑–∞–ø—è—Ç–æ–π;\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`–ë—Ä–µ–¥ –ü–∏—Ç –≤ —Ä–æ–ª–∏ –¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä —Å–∏–¥–∏—Ç –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–µ, –æ–≥–æ–Ω—å –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ`\n\n"
            "‚ùó–ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω! –ß–µ–º —Ä–∞–Ω—å—à–µ —Å–ª–æ–≤–æ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –µ–≥–æ –≤–µ—Å;\n\n"
            "üõë –ù–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å  ‚Äú—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Äù, —ç—Ç–æ —É—Ö—É–¥—à–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç;\n\n"
            "üë®‚Äçüé® –î–æ—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –±–æ—Ç—É –∏ –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–µ–π;\n\n"
            "üñã–û–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∏ –æ–Ω –ø—Ä–∏—à–ª–µ—Ç —á–µ—Ç—ã—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –µ–µ –æ–ø–∏—Å–∞–Ω–∏—è;\n\n"
            "üåáüéÜ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–≤–æ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–Ω –æ–±—ä–µ–¥–µ–Ω–∏—Ç –∏—Ö.\n"
            "üí°–î–ª—è –Ω–∞–∏–ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∞ —Ç–∞–∫ –∂–µ, –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∏–ª–∏ –±–ª–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è;\n\n"
            "üîû–í–Ω–∏–º–∞–Ω–∏–µ!!! –°—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 18+, —Ä–∞–±–æ—Ç–∞–µ—Ç AI –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –±–∞–Ω—É!"
        )
        await callback.message.answer(intro_message, parse_mode=ParseMode.MARKDOWN)
        await state.set_state(MenuState.mj)
        await callback.answer()
        return
    if action == "dale":
        intro_message = (
            "üåÜ–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã, —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö –ª–æ–≥–∏—á–µ—Å–∫–æ–π –∑–∞–ø—è—Ç–æ–π;\n\n"
            "üîû–í–Ω–∏–º–∞–Ω–∏–µ!!! –°—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 18+, —Ä–∞–±–æ—Ç–∞–µ—Ç AI –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –±–∞–Ω—É!"
        )

        await callback.message.answer(intro_message)
        await state.set_state(MenuState.dalle)
        await callback.answer()
        return
    if action == "gpt":
        answer = (
            "–í–≤–µ–¥–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.\n\n"
            "–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª CHAT GPT, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç - 15 –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
            "üìÇ–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏, —Å–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ñ–∞–π–ª "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä  Google –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å  –¥–∏—Å–∫) –∏ –¥–∞–ª–µ–µ —É–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Å –Ω–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å."
        )
        await callback.message.answer(answer)
        await state.set_state(MenuState.gpt)
        await callback.answer()
        return
    if action == "lk":
        referral: Referral = await Referral.objects.get_referral_by_user(user=current_user)
        if not referral:
            referral = await Referral.objects.create_referral(current_user)

        builder = InlineKeyboardBuilder()
        answer = f"–í–∞—à –±–∞–ª–∞–Ω—Å {current_user.balance}\n" f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {BOT_START_HOST}{referral.key}"
        lk_buttons = (types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¢–∞—Ä–∏—Ñ—ã", callback_data="lk_options"),)
        builder.row(*lk_buttons)
        await callback.message.answer(answer, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)

        await callback.answer()
        return
    if action == "ref":
        referral: Referral = await Referral.objects.get_referral_by_user(user=current_user)
        if not referral:
            referral = await Referral.objects.create_referral(current_user)

        answer = (
            "–ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –í–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ 6 —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {BOT_START_HOST}{referral.key}"
        )
        await callback.message.answer(answer, parse_mode=ParseMode.HTML)

        await callback.answer()
        return


@menu_router.callback_query(lambda c: c.data.startswith("lk"))
async def lk_callback(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    current_user: User = await User.objects.get_user_by_chat_id(str(callback.message.chat.id))

    if action == "options":
        answer = (
            f"–í–∞—à –±–∞–ª–∞–Ω—Å –≤ —Ç–æ–∫–µ–Ω–∞—Ö: {current_user.balance}\n"
            "–û–¥–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Midjourney = 2\n"
            "–û—Ç–¥–µ–ª—å–Ω–æ —Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Upscale:\n"
            "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑—É–º, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞—å–∞ –∏ —Ç–¥ = 2\n"
            "Upscale 2x = 4\n"
            "Upscale 4x = 8\n"
            "–û–¥–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è DALL-E = 2\n"
            "–û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å Chat GPT –≤ —Ç.—á. –ü–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–∞ = 1\n"
            "–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤ USDT - 1 usdt = 100—Ä"
        )

        prices: list[Price] = await Price.objects.get_active_prices_by_product(ProductEnum.TOKEN)
        options_button = []
        for price in prices:
            button = types.InlineKeyboardButton(
                text=f"{price.quantity} {price.description} = {price.amount} —Ä—É–±",
                callback_data=f"pay-options_{price.quantity}_{price.amount}",
            )
            options_button.append(button)

        builder = InlineKeyboardBuilder()
        j = 0
        for i in range(len(options_button) // 2):
            builder.row(options_button[j], options_button[j + 1])
            j += 2
        if range(len(options_button) % 2 != 0):
            builder.row(options_button[-1])

        await callback.message.answer(answer, reply_markup=builder.as_markup())
        await callback.answer()


@menu_router.callback_query(lambda c: c.data.startswith("ref_list"))
async def ref_callback(callback: types.CallbackQuery):
    referrals: list[Referral] = await Referral.objects.get_referrals()

    builder = InlineKeyboardBuilder()
    for referral in referrals:
        button = types.InlineKeyboardButton(
            text=f"{referral.name} [{referral.used_count}]",
            callback_data=f"ref-val_{referral.key}",
        )
        builder.row(button)

    await callback.message.answer("–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫", reply_markup=builder.as_markup())


@menu_router.callback_query(lambda c: c.data.startswith("ref-val"))
async def ref_value_callback(callback: types.CallbackQuery):
    value = callback.data.split("_")[-1]

    await callback.message.answer(f"{BOT_START_HOST}{value}", parse_mode=ParseMode.HTML)
