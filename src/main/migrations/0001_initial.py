# Generated by Django 4.2.6 on 2023-11-07 11:16

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.enums
import main.models.user


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("username", models.CharField(blank=True, null=True, unique=True)),
                ("telegram_username", models.CharField(null=True, unique=True, verbose_name="Юзернейм в телеграме")),
                ("chat_id", models.CharField(null=True, unique=True, verbose_name="ID чата телеграм")),
                ("balance", models.IntegerField(default=15, verbose_name="Баланс в токенах")),
                (
                    "role",
                    models.CharField(
                        choices=[("ADMIN", "ADMIN"), ("PREMIUM", "PREMIUM"), ("BASE", "BASE")],
                        default=main.enums.UserRoleEnum["BASE"],
                        verbose_name="Роль",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[("PENDING", "PENDING"), ("READY", "READY"), ("BANNED", "BANNED")],
                        default=main.enums.UserStateEnum["READY"],
                        verbose_name="Состояние",
                    ),
                ),
                ("gen_date", models.DateTimeField(auto_now=True, null=True, verbose_name="Дата последней генерации")),
                ("pay_date", models.DateTimeField(null=True, verbose_name="Дата последней оплаты")),
                ("password", models.CharField(blank=True, verbose_name="Пароль")),
                ("fail_in_row", models.IntegerField(default=0, verbose_name="Ошибок подряд")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "invited_by",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="invites",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пригласил",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
            },
            managers=[
                ("objects", main.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="BanWord",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("word", models.CharField(unique=True, verbose_name="Запрещенное слово")),
                ("is_active", models.BooleanField(default=False, verbose_name="Активный")),
            ],
            options={
                "verbose_name": "Запрещенное слово",
                "verbose_name_plural": "Запрещенные слова",
            },
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("channel", models.CharField(verbose_name="Канал")),
            ],
            options={
                "verbose_name": "Канал",
                "verbose_name_plural": "Каналы",
            },
        ),
        migrations.CreateModel(
            name="Describe",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file_name", models.CharField(verbose_name="Имя файла")),
                ("chat_id", models.CharField(verbose_name="ID телеграм чата")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Время создания")),
            ],
            options={
                "verbose_name": "Описание фото",
                "verbose_name_plural": "Описания фото",
            },
        ),
        migrations.CreateModel(
            name="DsMjUser",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, null=True, verbose_name="Имя")),
                ("token", models.CharField(unique=True, verbose_name="Токен")),
                ("is_active", models.BooleanField(default=True, verbose_name="Активный")),
                ("fail_in_row", models.IntegerField(default=0, verbose_name="Ошибок подряд")),
            ],
            options={
                "verbose_name": "Дискорд аккаунт",
                "verbose_name_plural": "Дискорд аккаунты",
            },
        ),
        migrations.CreateModel(
            name="Price",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("quantity", models.IntegerField(verbose_name="Колличество")),
                (
                    "product",
                    models.CharField(
                        choices=[("TOKEN", "TOKEN")], default=main.enums.ProductEnum["TOKEN"], verbose_name="Продукт"
                    ),
                ),
                ("description", models.CharField(verbose_name="Описание")),
                ("amount", models.FloatField(verbose_name="Сумма")),
                (
                    "currency",
                    models.CharField(
                        choices=[("RUB", "RUB"), ("USD", "USD")],
                        default=main.enums.CurrencyEnum["RUB"],
                        verbose_name="Валюта",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Активный")),
            ],
            options={
                "verbose_name": "Продукт",
                "verbose_name_plural": "Продукты",
            },
        ),
        migrations.CreateModel(
            name="TelegramAnswer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[("START", "START"), ("HELP", "HELP"), ("CENSOR", "CENSOR")],
                        unique=True,
                        verbose_name="Тип ответа",
                    ),
                ),
                ("message", models.TextField(verbose_name="Содержание ответа")),
            ],
            options={
                "verbose_name": "Ответ бота",
                "verbose_name_plural": "Ответы бота",
            },
        ),
        migrations.CreateModel(
            name="Referral",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(unique=True, verbose_name="Уникальный ключ")),
                ("name", models.CharField(blank=True, null=True, verbose_name="Название")),
                ("used_count", models.IntegerField(default=0, verbose_name="Колличество переходов")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Время создания")),
                (
                    "referrer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="referrals",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Владелец ссылки",
                    ),
                ),
            ],
            options={
                "verbose_name": "Рефферальная ссылка",
                "verbose_name_plural": "Реферальные ссылки",
            },
        ),
        migrations.CreateModel(
            name="Prompt",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("prompt", models.CharField(verbose_name="Промпт или действие")),
                ("telegram_chat_id", models.CharField(null=True, verbose_name="ID телеграм чата")),
                ("discord_message_id", models.CharField(null=True, verbose_name="ID сообщения в дискорд")),
                ("message_hash", models.CharField(null=True, verbose_name="хэш сообщения")),
                ("caption", models.CharField(null=True, verbose_name="Подпись")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Время создания")),
                (
                    "telegram_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prompts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Промпт",
                "verbose_name_plural": "Промпты",
            },
        ),
        migrations.CreateModel(
            name="Pay",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount", models.DecimalField(decimal_places=4, max_digits=12, verbose_name="Сумма оплаты")),
                ("token_count", models.IntegerField(null=True, verbose_name="Эквивалент в токенах")),
                ("pay_id", models.CharField(null=True, verbose_name="ID оплаты в провайдере")),
                ("is_verified", models.BooleanField(default=False, null=True, verbose_name="Подтвержден")),
                (
                    "merchant",
                    models.CharField(
                        choices=[("YOOKASSA", "YOOKASSA"), ("WALLET", "WALLET")], null=True, verbose_name="Провайдер"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Время создания")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="payments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Платеж",
                "verbose_name_plural": "Платежи",
            },
        ),
        migrations.CreateModel(
            name="GptContext",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("role", models.CharField(verbose_name="Роль")),
                ("content", models.CharField(verbose_name="Содержание")),
                ("telegram_chat_id", models.CharField(verbose_name="ID телеграм чата")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Время создания")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gpt_contexts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Контекст GPT",
                "verbose_name_plural": "Контексты GPT",
            },
        ),
        migrations.CreateModel(
            name="Blend",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("group_id", models.CharField(verbose_name="ID медиа группы")),
                ("uploaded_filename", models.CharField(verbose_name="Имя файла")),
                ("chat_id", models.CharField(null=True, verbose_name="ID телеграм чата")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Время создания")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blends",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Объедененное фото",
                "verbose_name_plural": "Объедененные фото",
            },
        ),
    ]
